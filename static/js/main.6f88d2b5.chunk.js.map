{"version":3,"sources":["CountriesCities.js","components/Tables.js","App.js","reportWebVitals.js","index.js","components/Tables.module.css"],"names":["country","Afghanistan","Albania","Bangladesh","Zimbabwe","Tables","useState","gridApi","setGridApi","igridApi","setIGridApi","setGridColumnApi","setIGridColumnApi","cities","setCities","data","JSON","parse","localStorage","getItem","Id","Name","Email","Gender","DOB","City","Country","rowData","setRowData","newrowData","setNewRowData","DeleteRow","params","DeleteOutlined","onClick","deleteHandler","api","applyTransaction","remove","refreshCells","force","components","dateEditor","Datepicker","prototype","init","this","eInput","document","createElement","value","classList","add","style","height","$","datepicker","dateFormat","getGui","afterGuiAttached","focus","select","getValue","destroy","isPopup","getDatePicker","frameworkComponents","btnCellRenderer","lookupValue","mappings","key","extractValues","Object","keys","genderMappings","Male","Female","genders","countries","display","justifyContent","flexDirection","className","classes","btns","index","selectedRowNodes","getSelectedNodes","length","childIndex","addIndex","addData","selectedIds","map","rowNode","filteredData","filter","dataItem","includes","removeSelected","removeNonSelected","setItem","stringify","width","modules","AllModules","popupParent","querySelector","onGridReady","columnApi","rowSelection","enableCellEditOnFocus","defaultColDef","flex","minWidth","editable","resizable","sortable","animateRows","singleClickEdit","tooltipShowDelay","enableBrowserTooltips","pagination","paginationAutoPageSize","field","checkboxSelection","pinned","cellStyle","backgroundColor","tooltipField","email","test","String","toLowerCase","cellEditor","cellEditorParams","values","filterParams","valueFormatter","clearButton","suppressAndOrCondition","comparator","filterLocalDateAtMidnight","cellValue","dateParts","split","cellDate","Date","Number","getTime","onCellValueChanged","newValue","color","cellRenderer","cellRendererParams","label","fontWeight","margin","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.6f88d2b5.chunk.js","sourcesContent":["export const country = {\r\n  Afghanistan: [\r\n    \"Herat\",\r\n    \"Kabul\",\r\n    \"Kandahar\",\r\n    \"Molah\",\r\n    \"Rana\",\r\n    \"Shar\",\r\n    \"Sharif\",\r\n    \"Wazir Akbar Khan\",\r\n  ],\r\n  Albania: [\r\n    \"Elbasan\",\r\n    \"Petran\",\r\n    \"Pogradec\",\r\n    \"Shkoder\",\r\n    \"Tirana\",\r\n    \"Ura Vajgurore\",\r\n  ],\r\n  Bangladesh: [\r\n    \"Agrabad\",\r\n    \"Bangla\",\r\n    \"Barisal\",\r\n    \"Bazar\",\r\n    \"Chittagong\",\r\n    \"Comilla\",\r\n    \"Delta\",\r\n    \"Dhaka\",\r\n    \"Hossain\",\r\n    \"Jessore\",\r\n    \"Kabi\",\r\n    \"Kazipur\",\r\n    \"Mymensingh\",\r\n    \"Narayanganj\",\r\n    \"Rajshahi\",\r\n    \"Tejgaon\",\r\n    \"Uttara\",\r\n  ],\r\n  \"United Arab Emirates\": [\r\n    \"Abu Dhabi\",\r\n    \"Al Ain\",\r\n    \"Al Khan\",\r\n    \"Ar Ruways\",\r\n    \"As Satwah\",\r\n    \"Dayrah\",\r\n    \"Dubai\",\r\n    \"Fujairah\",\r\n    \"Ras al-Khaimah\",\r\n    \"Sharjah\",\r\n  ],\r\n  Zimbabwe: [\r\n    \"Bulawayo\",\r\n    \"Chinhoyi\",\r\n    \"Greendale\",\r\n    \"Gwanda\",\r\n    \"Harare\",\r\n    \"Kwekwe\",\r\n    \"Mufakose\",\r\n    \"Mutare\",\r\n    \"Victoria Falls\",\r\n  ],\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AgGridReact, AgGridColumn } from \"@ag-grid-community/react\";\r\nimport { AllModules } from \"@ag-grid-enterprise/all-modules\";\r\nimport { country } from \"../CountriesCities\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport classes from \"./Tables.module.css\";\r\nimport { Button } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nimport $ from \"jquery\";\r\nimport \"jquery-ui/ui/widgets/datepicker\";\r\nimport \"jquery-ui-dist/jquery-ui.css\";\r\n\r\nfunction Tables() {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [igridApi, setIGridApi] = useState(null);\r\n  const [gridColumnApi, setGridColumnApi] = useState(null);\r\n  const [igridColumnApi, setIGridColumnApi] = useState(null);\r\n  const [cities, setCities] = useState([]);\r\n  const data = JSON.parse(localStorage.getItem(\"rowData\"));\r\n  const [rowData, setRowData] = useState(\r\n    data\r\n      ? data\r\n      : [\r\n          {\r\n            Id: 1,\r\n            Name: \"Janie\",\r\n            Email: \"jclampton0@over-blog.com\",\r\n            Gender: \"Female\",\r\n            DOB: \"03-07-1998\",\r\n            City: \"Kabul\",\r\n            Country: \"Afghanistan\",\r\n          },\r\n          {\r\n            Id: 2,\r\n            Name: \"Kassie\",\r\n            Email: \"ksimonyi1@slashdot.org\",\r\n            Gender: \"Female\",\r\n            DOB: \"24-12-1987\",\r\n            City: \"Harare\",\r\n            Country: \"Zimbabwe\",\r\n          },\r\n          {\r\n            Id: 3,\r\n            Name: \"Homerus\",\r\n            Email: \"hivanenkov2@163.com\",\r\n            Gender: \"Male\",\r\n            DOB: \"14-01-1990\",\r\n            City: \"Dhaka\",\r\n            Country: \"Bangladesh\",\r\n          },\r\n          {\r\n            Id: \"4\",\r\n            Name: \"Monis\",\r\n            Email: \"monisbana04@gmail.com\",\r\n            Gender: \"Male\",\r\n            DOB: \"11-02-2021\",\r\n            City: \"Dubai\",\r\n            Country: \"United Arab Emirates\",\r\n          },\r\n        ]\r\n  );\r\n\r\n  const [newrowData, setNewRowData] = useState([]);\r\n\r\n  function onGridReady(params) {\r\n    setGridApi(params.api);\r\n    setGridColumnApi(params.columnApi);\r\n  }\r\n\r\n  function onIGridReady(params) {\r\n    setIGridApi(params.api);\r\n    setIGridColumnApi(params.columnApi);\r\n  }\r\n\r\n  // Remove Selected Rows\r\n  const removeSelected = () => {\r\n    const selectedRowNodes = gridApi.getSelectedNodes();\r\n    const selectedIds = selectedRowNodes.map(function (rowNode) {\r\n      return rowNode.data.Id;\r\n    });\r\n    const filteredData = rowData.filter(function (dataItem) {\r\n      return !selectedIds.includes(dataItem.Id);\r\n    });\r\n    setRowData(filteredData);\r\n    gridApi.setRowData(filteredData);\r\n  };\r\n\r\n  // Remove Non Selected Rows\r\n  const removeNonSelected = () => {\r\n    var selectedRowNodes = gridApi.getSelectedNodes();\r\n    var selectedIds = selectedRowNodes.map(function (rowNode) {\r\n      return rowNode.data.Id;\r\n    });\r\n    const filteredData = rowData.filter(function (dataItem) {\r\n      return selectedIds.includes(dataItem.Id);\r\n    });\r\n    setRowData(filteredData);\r\n    gridApi.setRowData(filteredData);\r\n  };\r\n\r\n  function getDatePicker() {\r\n    function Datepicker() {}\r\n    Datepicker.prototype.init = function (params) {\r\n      this.eInput = document.createElement(\"input\");\r\n      this.eInput.value = params.value;\r\n      this.eInput.classList.add(\"ag-input\");\r\n      this.eInput.style.height = \"100%\";\r\n      $(this.eInput).datepicker({ dateFormat: \"dd-mm-yy\" });\r\n    };\r\n    Datepicker.prototype.getGui = function () {\r\n      return this.eInput;\r\n    };\r\n    Datepicker.prototype.afterGuiAttached = function () {\r\n      this.eInput.focus();\r\n      this.eInput.select();\r\n    };\r\n    Datepicker.prototype.getValue = function () {\r\n      return this.eInput.value;\r\n    };\r\n    Datepicker.prototype.destroy = function () {};\r\n    Datepicker.prototype.isPopup = function () {\r\n      return false;\r\n    };\r\n    return Datepicker;\r\n  }\r\n\r\n  // Delete Button\r\n  const DeleteRow = (params) => {\r\n    return <DeleteOutlined onClick={() => deleteHandler(params)} />;\r\n  };\r\n  const deleteHandler = (params) => {\r\n    params.api.applyTransaction({ remove: [params.data] });\r\n    params.api.refreshCells({ force: true });\r\n  };\r\n\r\n  const components = {\r\n    dateEditor: getDatePicker(),\r\n  };\r\n  const frameworkComponents = {\r\n    btnCellRenderer: DeleteRow,\r\n  };\r\n\r\n  // Add Rows\r\n  function addData() {\r\n    let selectedRowNodes = gridApi.getSelectedNodes();\r\n    let index;\r\n\r\n    if (selectedRowNodes.length !== 0) {\r\n      index = selectedRowNodes[selectedRowNodes.length - 1].childIndex;\r\n    } else {\r\n      index = rowData.length - 1;\r\n    }\r\n\r\n    gridApi.applyTransaction({\r\n      add: [\r\n        {\r\n          Id: \"\",\r\n          Name: \"\",\r\n          Email: \"\",\r\n          Gender: \"\",\r\n          DOB: \"\",\r\n          City: \"\",\r\n          Country: \"\",\r\n        },\r\n      ],\r\n      addIndex: index + 1,\r\n    });\r\n  }\r\n  //Helper functions to populate Country City dropdown accordingly\r\n  function lookupValue(mappings, key) {\r\n    return mappings[key];\r\n  }\r\n  function extractValues(mappings) {\r\n    return Object.keys(mappings);\r\n  }\r\n  const genderMappings = {\r\n    Male: \"Male\",\r\n    Female: \"Female\",\r\n  };\r\n  const genders = extractValues(genderMappings);\r\n  const countries = extractValues(country);\r\n\r\n  const populateCities = (Country) => {\r\n    setCities(country[Country]);\r\n  };\r\n\r\n  //Add Data to submit table and to localStorage\r\n  const onSubmit = () => {\r\n    setNewRowData(rowData);\r\n    localStorage.setItem(\"rowData\", JSON.stringify(rowData));\r\n    igridApi.setRowData(rowData);\r\n  };\r\n\r\n  //Function to validate Email\r\n  function validateEmail(email) {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return !re.test(String(email).toLowerCase());\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n          <Button className={classes.btns} onClick={() => addData()}>\r\n            Add Row\r\n          </Button>\r\n          <Button className={classes.btns} onClick={() => removeSelected()}>\r\n            Delete Selected Rows\r\n          </Button>\r\n          <Button className={classes.btns} onClick={() => removeNonSelected()}>\r\n            Delete Non Selected Rows\r\n          </Button>\r\n          <Button className={classes.btns} onClick={() => onSubmit()}>\r\n            Submit\r\n          </Button>\r\n        </div>\r\n        <div\r\n          className=\"ag-theme-alpine\"\r\n          style={{\r\n            height: 330,\r\n            width: 1500,\r\n          }}\r\n        >\r\n          <AgGridReact\r\n            modules={AllModules}\r\n            popupParent={document.querySelector(\"body\")}\r\n            onGridReady={onGridReady}\r\n            rowData={rowData}\r\n            rowSelection=\"multiple\"\r\n            components={components}\r\n            frameworkComponents={frameworkComponents}\r\n            enableCellEditOnFocus={true}\r\n            defaultColDef={{\r\n              flex: 1,\r\n              minWidth: 110,\r\n              editable: true,\r\n              resizable: true,\r\n              sortable: true,\r\n              filter: true,\r\n            }}\r\n            animateRows={true}\r\n            singleClickEdit={true}\r\n            tooltipShowDelay={0}\r\n            enableBrowserTooltips={true}\r\n            pagination={true}\r\n            paginationAutoPageSize={true}\r\n          >\r\n            <AgGridColumn\r\n              field=\"Id\"\r\n              checkboxSelection={true}\r\n              pinned=\"left\"\r\n              cellStyle={(params) => {\r\n                if (params.value) {\r\n                  if (params.value.length === 0) {\r\n                    return { backgroundColor: \"red\" };\r\n                  }\r\n                  return { backgroundColor: \"transperant\" };\r\n                }\r\n              }}\r\n            ></AgGridColumn>\r\n            <AgGridColumn\r\n              field=\"Name\"\r\n              pinned=\"left\"\r\n              tooltipField=\"Name\"\r\n              cellStyle={(params) => {\r\n                if (params.value) {\r\n                  if (params.value.length === 0) {\r\n                    return { backgroundColor: \"red\" };\r\n                  }\r\n                  return { backgroundColor: \"white\" };\r\n                }\r\n              }}\r\n            ></AgGridColumn>\r\n            <AgGridColumn\r\n              field=\"Email\"\r\n              tooltipField=\"Email\"\r\n              cellStyle={(params) => {\r\n                if (params.value) {\r\n                  if (validateEmail(params.value)) {\r\n                    return { backgroundColor: \"yellow\" };\r\n                  }\r\n                  return { backgroundColor: \"white\" };\r\n                }\r\n              }}\r\n            ></AgGridColumn>\r\n            <AgGridColumn\r\n              field=\"Gender\"\r\n              cellEditor=\"agSelectCellEditor\"\r\n              tooltipField=\"Gender\"\r\n              cellEditorParams={{ values: genders }}\r\n              filterParams={{\r\n                valueFormatter: (params) => {\r\n                  return lookupValue(genderMappings, params.value);\r\n                },\r\n              }}\r\n              valueFormatter={(params) => {\r\n                return lookupValue(genderMappings, params.value);\r\n              }}\r\n            ></AgGridColumn>\r\n            <AgGridColumn\r\n              field=\"DOB\"\r\n              tooltipField=\"DOB\"\r\n              cellEditor=\"dateEditor\"\r\n              filter=\"agDateColumnFilter\"\r\n              filterParams={{\r\n                clearButton: true,\r\n                suppressAndOrCondition: true,\r\n                comparator: function (filterLocalDateAtMidnight, cellValue) {\r\n                  var dateAsString = cellValue;\r\n                  var dateParts = dateAsString.split(\"-\");\r\n                  var cellDate = new Date(\r\n                    Number(dateParts[2]),\r\n                    Number(dateParts[1]) - 1,\r\n                    Number(dateParts[0])\r\n                  );\r\n                  if (\r\n                    filterLocalDateAtMidnight.getTime() === cellDate.getTime()\r\n                  ) {\r\n                    return 0;\r\n                  }\r\n                  if (cellDate < filterLocalDateAtMidnight) {\r\n                    return -1;\r\n                  }\r\n                  if (cellDate > filterLocalDateAtMidnight) {\r\n                    return 1;\r\n                  }\r\n                },\r\n              }}\r\n            ></AgGridColumn>\r\n            <AgGridColumn\r\n              field=\"Country\"\r\n              tooltipField=\"Country\"\r\n              cellEditor=\"agSelectCellEditor\"\r\n              cellEditorParams={{ values: countries }}\r\n              onCellValueChanged={(params) => populateCities(params.newValue)}\r\n              filterParams={{\r\n                valueFormatter: (params) => {\r\n                  return lookupValue(country, params.value);\r\n                },\r\n              }}\r\n              valueFormatter={(params) => {\r\n                return lookupValue(countries, params.value);\r\n              }}\r\n            ></AgGridColumn>\r\n            <AgGridColumn\r\n              field=\"City\"\r\n              tooltipField=\"City\"\r\n              cellEditor=\"agSelectCellEditor\"\r\n              cellEditorParams={{ values: cities }}\r\n              filterParams={{\r\n                valueFormatter: (params) => {\r\n                  return lookupValue(cities, params.value);\r\n                },\r\n              }}\r\n              valueFormatter={(params) => {\r\n                return lookupValue(cities, params.value);\r\n              }}\r\n            ></AgGridColumn>\r\n            <AgGridColumn\r\n              editable={false}\r\n              cellStyle={{ color: \"rgb(255, 77, 79)\" }}\r\n              cellRenderer=\"btnCellRenderer\"\r\n              cellRendererParams={{\r\n                onClick: () => DeleteRow(),\r\n                label: \"Click\",\r\n              }}\r\n            ></AgGridColumn>\r\n          </AgGridReact>\r\n          <h3 style={{ fontWeight: \"bold\", margin: \"10px\" }}>Submitted Data</h3>\r\n          <AgGridReact\r\n            onGridReady={onIGridReady}\r\n            rowData={newrowData}\r\n            defaultColDef={{\r\n              flex: 1,\r\n              minWidth: 110,\r\n              filter: true,\r\n            }}\r\n          >\r\n            <AgGridColumn field=\"Id\"></AgGridColumn>\r\n            <AgGridColumn field=\"Name\"></AgGridColumn>\r\n            <AgGridColumn field=\"Email\"></AgGridColumn>\r\n            <AgGridColumn field=\"Gender\"></AgGridColumn>\r\n            <AgGridColumn field=\"DOB\"></AgGridColumn>\r\n            <AgGridColumn field=\"Country\"></AgGridColumn>\r\n            <AgGridColumn field=\"City\"></AgGridColumn>\r\n          </AgGridReact>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tables;\r\n","import \"./App.css\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport Tables from \"./components/Tables\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tables />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btns\":\"Tables_btns__MjnQw\",\"deleteBtn\":\"Tables_deleteBtn__1eewB\"};"],"sourceRoot":""}